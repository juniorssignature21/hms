
# class Booking(models.Model):
#     created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='created_customers')
#     user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
#     payment_status = models.CharField(max_length=100, choices=PAYMENT_STATUS, default="initiated")
#     payment_mode = models.CharField(max_length=100, choices=PAYMENT_MODE, default="cash")
#     full_name = models.CharField(max_length=1000, null=True, blank=True)
#     email = models.EmailField(null=True, blank=True)
#     phone = models.CharField(max_length=1000, null=True, blank=True)
#     hotel = models.ForeignKey(Hotel, on_delete=models.SET_NULL, null=True)
#     booking_type = models.CharField(max_length=100, choices=BOOKING_TYPE, default="Instant")
#     room_type = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True)
#     room = models.ManyToManyField(Room)
#     discount_type = models.CharField(max_length=1000, null=True, blank=True)
#     discount_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)
#     before_discount = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)
#     total = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)
#     advance_amount =  models.DecimalField(max_digits=12, decimal_places=2, default=0.00)
#     saved = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)
#     check_in_date = models.DateField()
#     check_out_date = models.DateField()
#     total_days = models.PositiveIntegerField(default=0)
#     num_adults = models.PositiveIntegerField(default=1)
#     num_children = models.PositiveIntegerField(default=0)
#     arrival_from = models.CharField(max_length=1000, null=True, blank=True)
#     checked_in = models.BooleanField(default=False)
#     checked_out = models.BooleanField(default=False)
#     is_active = models.BooleanField(default=True)
#     checked_in_tracker = models.BooleanField(default=False, help_text="DO NOT CHECK THIS BOX")
#     checked_out_tracker = models.BooleanField(default=False, help_text="DO NOT CHECK THIS BOX")
#     date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
#     coupons = models.ManyToManyField("bookings.Coupon",null=True, blank=True)
#     vip = models.BooleanField(default=False)
#     stripe_payment_intent = models.CharField(max_length=200,null=True, blank=True)
#     success_id = ShortUUIDField(length=300, max_length=505, alphabet="abcdefghijklmnopqrstuvxyz1234567890")
#     booking_id = ShortUUIDField(unique=True, length=10, max_length=20, alphabet="abcdefghijklmnopqrstuvxyz")
    
#     def save(self, *args, **kwargs):
#         if self.check_in_date and self.check_out_date:
#             # Calculate the total number of days
#             self.total_days = (self.check_out_date - self.check_in_date).days
#         else:
#             self.total_days = 0
#         super().save(*args, **kwargs)

#     def __str__(self):
#         return f"{self.booking_id}"
    
#     def rooms(self):
#         return self.room.all().count()


# ===========================================================================================================================================================
# ============================================================================================================================================================





# class Booking(Transaction):
#     booking_id = ShortUUIDField(unique=True, length=10, max_length=20, alphabet="abcdefghijklmnopqrstuvxyz")
#     payment = models.ForeignKey('Payment', on_delete=models.SET_NULL, null=True, blank=True)
#     is_active = models.BooleanField(default=True)
#     checked_in = models.BooleanField(default=False)
#     checked_out = models.BooleanField(default=False)
#     reservation = models.OneToOneField('Reservation', on_delete=models.SET_NULL, null=True, blank=True)
#     date = models.DateTimeField(auto_now_add=True)

#     def __str__(self):
#         return f"Booking {self.booking_id} by {self.user.username if self.user else 'Guest'}"
    
#     def calculate_total(self):
#         additional = self.additional_charges.aggregate(total=models.Sum('amount'))['total'] or 0
#         return self.total_amount + additional


#     def get_total_with_additional_charges(self):
#         return self.calculate_total()


#     def convert_reservation_to_booking(self, reservation):
#         self.user = reservation.user
#         self.hotel = reservation.hotel
#         self.room_type = reservation.room_type
#         self.check_in_date = reservation.check_in_date
#         self.check_out_date = reservation.check_out_date
#         self.num_adults = reservation.num_adults
#         self.num_children = reservation.num_children
#         self.reservation = reservation
#         self.total_amount = reservation.total_amount
#         self.save()


 templates = {
        'step1': 'front_desk/booking/step1.html',
        'step2': 'front_desk/booking/step2.html',
        'step3': 'front_desk/booking/step3.html',
        'step5': 'front_desk/booking/step5.html',
        'step6_booking': 'front_desk/booking/step6_booking.html',
        'step6_reservation': 'front_desk/booking/step6_reservation.html',
        'step7': 'front_desk/booking/step7.html',
        'step8': 'front_desk/booking/step8.html',
    }
 
 
 
 <form method="POST">
    {{ wizard.management_form }}

    <!-- First field inside a custom container -->
    <div class="custom-container">
        <div class="custom-inner">
            <label for="{{ wizard.form.email.id_for_label }}">Email</label>
            {{ wizard.form.email }}
            {% if wizard.form.email.errors %}
                <div class="error">{{ wizard.form.email.errors }}</div>
            {% endif %}
        </div>
    </div>

    <!-- Another field in a different section -->
    <div class="row">
        <div class="col-md-6">
            <label for="{{ wizard.form.phone.id_for_label }}">Phone</label>
            {{ wizard.form.phone }}
            {% if wizard.form.phone.errors %}
                <div class="error">{{ wizard.form.phone.errors }}</div>
            {% endif %}
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</form>